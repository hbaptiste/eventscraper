// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: form.submission.query.sql

package gendb

import (
	"context"
	"time"
)

const cancelSubmission = `-- name: CancelSubmission :exec
UPDATE form_submissions 
    SET status = 'cancelled', updated_at = ? 
    WHERE cancel_token = ? AND status = 'active' or status='pending'
`

type CancelSubmissionParams struct {
	UpdatedAt   time.Time
	CancelToken string
}

func (q *Queries) CancelSubmission(ctx context.Context, arg CancelSubmissionParams) error {
	_, err := q.db.ExecContext(ctx, cancelSubmission, arg.UpdatedAt, arg.CancelToken)
	return err
}

const cleanupOldSubmission = `-- name: CleanupOldSubmission :exec
DELETE FROM form_submissions 
    WHERE created_at < datetime('now', '-30 days')
`

func (q *Queries) CleanupOldSubmission(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupOldSubmission)
	return err
}

const createFormSubmission = `-- name: CreateFormSubmission :exec
INSERT INTO form_submissions (id, email, data, edit_token, cancel_token, confirmation_token, created_at, updated_at, expired_at, status)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateFormSubmissionParams struct {
	ID                string
	Email             string
	Data              string
	EditToken         string
	CancelToken       string
	ConfirmationToken string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	ExpiredAt         time.Time
	Status            string
}

func (q *Queries) CreateFormSubmission(ctx context.Context, arg CreateFormSubmissionParams) error {
	_, err := q.db.ExecContext(ctx, createFormSubmission,
		arg.ID,
		arg.Email,
		arg.Data,
		arg.EditToken,
		arg.CancelToken,
		arg.ConfirmationToken,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiredAt,
		arg.Status,
	)
	return err
}

const getSubmissionByToken = `-- name: GetSubmissionByToken :one
SELECT id, email, data, edit_token, cancel_token, confirmation_token, created_at, updated_at, expired_at, status
    FROM form_submissions 
    WHERE (edit_token = ? OR cancel_token = ? OR confirmation_token = ?)
`

type GetSubmissionByTokenParams struct {
	EditToken         string
	CancelToken       string
	ConfirmationToken string
}

type GetSubmissionByTokenRow struct {
	ID                string
	Email             string
	Data              string
	EditToken         string
	CancelToken       string
	ConfirmationToken string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	ExpiredAt         time.Time
	Status            string
}

func (q *Queries) GetSubmissionByToken(ctx context.Context, arg GetSubmissionByTokenParams) (GetSubmissionByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getSubmissionByToken, arg.EditToken, arg.CancelToken, arg.ConfirmationToken)
	var i GetSubmissionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Data,
		&i.EditToken,
		&i.CancelToken,
		&i.ConfirmationToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
		&i.Status,
	)
	return i, err
}

const getSubmissions = `-- name: GetSubmissions :many
SELECT id, email, data, edit_token, cancel_token, created_at, updated_at, status, expired_at, confirmation_token 
    FROM form_submissions
    WHERE status='pending' or status='active'
`

func (q *Queries) GetSubmissions(ctx context.Context) ([]FormSubmission, error) {
	rows, err := q.db.QueryContext(ctx, getSubmissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FormSubmission
	for rows.Next() {
		var i FormSubmission
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Data,
			&i.EditToken,
			&i.CancelToken,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.ExpiredAt,
			&i.ConfirmationToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubmissionStatus = `-- name: UpdateSubmissionStatus :exec
UPDATE form_submissions 
    SET status = ?, data = ?
    WHERE edit_token = ?
`

type UpdateSubmissionStatusParams struct {
	Status    string
	Data      string
	EditToken string
}

func (q *Queries) UpdateSubmissionStatus(ctx context.Context, arg UpdateSubmissionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSubmissionStatus, arg.Status, arg.Data, arg.EditToken)
	return err
}
