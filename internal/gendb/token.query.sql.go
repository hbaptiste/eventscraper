// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.query.sql

package gendb

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (user_id, token, expires_at) VALUES (?, ?, ?)
`

type CreateRefreshTokenParams struct {
	UserID    int64
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token from refresh_tokens where token=? and user_id=? and expires_at >= STRFTIME('%Y-%m-%d %H:%M:%S.999999', 'now')
`

type GetRefreshTokenParams struct {
	Token  string
	UserID int64
}

func (q *Queries) GetRefreshToken(ctx context.Context, arg GetRefreshTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, arg.Token, arg.UserID)
	var token string
	err := row.Scan(&token)
	return token, err
}
